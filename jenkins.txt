plan
code
build == sonaranalysis
        compile the code
        run the unit tests
        create a package

test 
       Automation test/manual testing 
       release

deploy
      Terraform, Ansible

operate
monitor
       promotheus,elastic search


for applications developed in java

we use maven as a build tool
    In Maven we have goals/build phase
         compile => Creates .class files
         test => runs the unit tests and generates the reports. This will also try to compile
         package => creates the jar/war file. This will execute compile + test
         install =>  Create the jar/war file and dependency pom file in M2 Folder
         deploy  =>  copy the final package to the remote repository
         clean => remove the target folder


1.mvn package    
2.mvn compile test package
3.mvn clean package

1 & 2 does same work
 3 deletes the previous workspace and creates again


the below two helps to view them on your console

Test results = target/surefire-reports/*.xml   ===== publish junit test results

artifacts    = target/*.jar   or target/*.war  ===== Archieve the artifacts



Different projects can be run at build-in-node or nodes that are configured to master 

using labels

jenkins to build pipelines using two approaches

scripted pipeline
Declarative pipeline

to trigger a job from cmd


curl -X POST --user rajesh:114eae11c3af71da9c12ad17186f99ef75 http://13.126.255.42:8080/job/ashish/job/for%20cmd%20trigger/build?delay=0sec


curl -X POST --user <username:token> <urlforjob>/build?delay=0sec

To trigger a job from java

download the jenkins-cli-jar
change to that path and install java
java -jar jenkins-cli.jar -s http://13.235.81.87:8080/ -auth rajesh:1190c7e6cb8e3b65515f8495966814ad58 who-am-i
java -jar jenkins-cli.jar -s <jenkinsurlupton 8080> -auth  <username:token> who-am-i

java -jar jenkins-cli.jar -s <jenkinsurlupton 8080> -auth  <username:token> build <jobname>




























